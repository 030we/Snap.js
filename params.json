{"name":"Snap.js","tagline":"Emulates native side-menus in Javascript","body":"<img src=\"http://i.imgur.com/NRveBu0.png\">\r\n\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar snapper = new Snap({\r\n  element: document.getElementById('content')\r\n});\r\n```\r\n\r\n## Settings and Defaults\r\n```javascript\r\nsettings = {\r\n    element: null,\r\n    resistance: 0.5,\r\n    flickThreshold: 50,\r\n    transitionSpeed: 0.3,\r\n    easing: 'ease',\r\n    maxPosition: 266,\r\n    minPosition: -266,\r\n    tapToClose: true,\r\n    slideIntent: 40\r\n}\r\n```\r\n\r\n* **`element`**: The element which the user will be sliding side to side\r\n* **`resistance`**: The cooeficcient used to slow sliding when user has passed max or min threshold\r\n* **`flickThreshold`**: Number of pixels the user needs to swiftly travel to activate a \"flick\" open\r\n* **`transitionSpeed`**: The speed at which the pane slides open or closed\r\n* **`easing`**: The CSS3 Easing method you want to use for transitions\r\n* **`maxPosition`**: Maximum number of pixels the pane may be slid to the right\r\n* **`minPosition`**: Maximum number of pixels the pane may be slid to the left\r\n* **`tapToClose`**: If true, tapping an open pane will close it\r\n* **`slideIntent`**: The number of degrees the user must initiate sliding in towards the left or right (see diagram below)\r\n\r\nNotes on Slide Intent: The slide intent is an int between 0 and 90, and represents the degrees in the first quadrant of a circle that you would like to have mirrored on the X *and* Y axis. For example, if you have 40 set as your `slideIntent` value, the user would only be able to slide the pane by dragging in the blue area in the diagram below. Once intent has been defined, it will not change until the user releases.\r\n\r\n<img src=\"http://i.imgur.com/uG2CNR8.png\">\r\n\r\n\r\n## Public Methods\r\n\r\n### `open`: Opens the pane to the specified side\r\n\r\n```javascript\r\nsnapper.open('left');\r\n// OR\r\nsnapper.open('right');\r\n```\r\n\r\n### `close`: Closes the pane\r\n\r\n```javascript\r\nsnapper.close();\r\n```\r\n\r\n### `on`: Adds an event hook\r\n\r\n```javascript\r\nsnapper.on('start', function(){\r\n  // Do Something\r\n});\r\n```\r\nThe available methods to hook into are as follows:\r\n\r\n* `start`: Fired when touching down on the draggable pane and it begins to move\r\n* `drag`: Fired when the pane has been moved or slid\r\n* `stop`: Fired when the pane has been let go od\r\n* `animating`: Fired when the pane is animating\r\n* `animated`: Fired when the pane is finished it's animations\r\n* `ignore`: Fired when trying to drag the pane but ended up dragging on an ignored element\r\n\r\n### `off`: Removes an event hook\r\n\r\n```javascript\r\nsnapper.off('drag');\r\n```\r\nThe event names listed above apply for the `off` method.\r\n\r\n\r\n### `state`: Returns detailed information about the state of the pane\r\n\r\n```javascript\r\nvar data = snapper.state();\r\n```\r\nThe data returned from the `state` method will look like the following:\r\n\r\n```javascript\r\n{\r\n    state: \"closed\", // State of the Pane\r\n    info:{\r\n        opening: \"left\", // Side which user intends to open\r\n        towards: \"right\", // Direction user is dragging towards\r\n        hyperExtending: false, // True if user is pulling past predefined bounds\r\n        halfway: false, // True if pane is at least halfway open\r\n        flick: false, // True if user has moved pane X amount of pixels in the open/close direction without changing directions\r\n        translation:{\r\n            absolute: 20, // Pixels pane has translated\r\n            relative: 21, // Pixels pane has translated relative to starting translation\r\n            sinceDirectionChange: 10 // Pixels pane has translated since the direction of the pane has changed\r\n        }\r\n    }\r\n} \r\n```\r\n\r\n## Gotchas\r\n\r\n### Layout\r\nThe layout itself is what most people will have a hard time emulating, so the simplest approach I have found is as follows:\r\n\r\nTwo absolute elements, one to represent *all* the content, and another to represent *all* the drawers. The content has a higher z-index than the drawers. Within the drawers element, it's direct children should represent the containers for the drawers, these should be `fixed` or `absolute`. Assigning classes to your drawers to specify which side it is on is recommended. All absolutely positioned elements should have 0 for `top, left, right, bottom` properties, excluding your panes which will have `auto` set to their respective sides and a width assigned. The width of your drawers is usually the same number you want to use for `minPosition` and `maxPosition`\r\n\r\n```html\r\ndiv.drawers {position: absolute;}\r\n    div.left-drawer  {position: absolute;}\r\n        [content]\r\n    div.right-drawer  {position: absolute;}\r\n        [content]\r\ndiv#content {position: absolute;}\r\n    [top-bars]\r\n    [content] {overflow: auto}\r\n    [bottom-bars]\r\n```\r\n\r\nA sample layout is found in demo/apps/default.html.\r\n\r\n### Independent Scrolling\r\nSome CSS is required to get some smooth ass scrolling. Utilize the CSS below to apply this to any of your elements:\r\n```css\r\n.scrollable{\r\n\toverflow: auto;\r\n\t-webkit-transition-property: top, bottom;\r\n\ttransition-property: top, bottom;\r\n\t-webkit-transition-duration: .2s, .2s;\r\n\ttransition-duration: .2s, .2s;\r\n\t-webkit-transition-timing-function: linear, linear;\r\n\ttransition-timing-function: linear, linear;\r\n\t-webkit-overflow-scrolling: touch;\r\n}\r\n```\r\n\r\n### Z-Indexes and Display\r\nBecause of the nature of this code, drawers are just kind of stacked behind the content. To bring the proper drawer to the fron, you can hook into Snaps event system:\r\n\r\n```javascript\r\nvar UpdateDrawers = function(){\r\n  var state = snapper.state(),\r\n\t\ttowards = state.info.towards,\r\n\t\topening = state.info.opening;\r\n\tif(opening=='right' && towards=='left'){\r\n\t\t// Revealing Right Drawer, apply CSS to that droor to bring it to the front.\r\n    // Usually, display:block works if you set all panes to display:none;\r\n\t} else if(opening=='left' && towards=='right') {\r\n\t\t// Revealing left Drawer\r\n\t}\r\n};\r\n\r\n// Bind Events\r\nsnapper.on('drag', UpdateDrawers);\r\nsnapper.on('animating', UpdateDrawers);\r\nsnapper.on('animated', UpdateDrawers);\r\n```\r\n\r\nAn example of this code in action can be found in demo/apps/ratchet/template.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}